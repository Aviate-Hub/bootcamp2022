#
# OpenSIPS Bootcamp Training
#     LAB 11.1
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


# SIP UDP listerner
socket=udp:eth0:5060




####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### JSON Management Interface
loadmodule "httpd.so"
modparam("httpd", "port", 8080)
loadmodule "mi_http.so"
modparam("mi_http", "root", "json")

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("usrloc","nat_bflag","NATED_CALLEE")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(rcv)")

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("auth_db", "load_credentials", "$avp(rpid)=rpid ;$avp(dpid)= dpid")

#### Domain Module
loadmodule "domain.so"
modparam("domain", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc", "use_domain", 1)

#### Alias DB Module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### IP-based Permissions Module
loadmodule "permissions.so"
modparam("permissions", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Group-based ACL Module
loadmodule "group.so"
modparam("group", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Dynamic Routing module
loadmodule "drouting.so"
modparam("drouting","db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### AVP OPerations module
loadmodule "avpops.so"
modparam("avpops", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")
modparam("avpops", "avp_table", "usr_preferences")

#### Dialplan module
loadmodule "dialplan.so"
modparam("dialplan", "db_url","mysql://opensips:opensipsrw@localhost/opensips")

#### Dialog Module
loadmodule "dialog.so"
modparam("dialog", "profiles_with_value", "caller ; domain")
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Topology Hiding Module
loadmodule "topology_hiding.so"

#### Load Balancer Module 
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("load_balancer", "probing_interval", 30)
modparam("load_balancer", "probing_from", "sip:lb@sip.domain.com")

#### NAT Traversal Module
loadmodule "nathelper.so"
modparam("nathelper", "received_avp", "$avp(rcv)")
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIPPING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@sip.domain.com")

#### RTP PROXY Module
loadmodule "rtpproxy.so"
modparam("rtpproxy", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("rtpproxy", "default_set", 1)

### S1 ###
### S1 ###


#### UDP protocol
loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route {
	## only incoming SIP requests entering here

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	xlog("SCRIPT:DBG: incoming $rm from $si:$sp, from $fu to $ru ($ci)\n");

	## NAT Detection
	force_rport();
	if (nat_uac_test(18))
		setflag('NATED_CALLER');

	## if it has TO TAG, it is a sequential/in-dialog request
	if (has_totag()) {
		route(handle_sequential);
	}

	## CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	########### only initial requests at this point #########
	t_check_trans();

	if ( is_method("REGISTER") ) {
		route(handle_register);
	}

	## authenticate and authorize
	if (check_source_address(0)) {

		# caller is a gateway

	} else

	if (is_from_local()) {

		# caller is local
		# authenticate if from local subscriber
		# authenticate all initial non-REGISTER request that pretend to be
		# generated by local subscriber (domain from FROM URI is local)
		if (!proxy_authorize("", "subscriber")) {
			proxy_challenge("", "auth,auth-int");
			exit;
		}
		if (!$au==$fU) {
			send_reply(403,"Forbidden auth ID");
			exit;
		}

		consume_credentials();
		# caller authenticated

	} else {

		# if caller is not local, then called number must be local
		if (!is_uri_host_local()) {
			send_reply(403,"Rely forbidden");
			exit;
		}

	}

	## record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n");
		route(relay);
	}

	## requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	### Create a new dialog ###
	if(is_method("INVITE")) {
		create_dialog("B");
		$DLG_timeout=7200;

		### Set profile ###
		set_dlg_profile("caller","$fU@$fd");
		set_dlg_profile("domain","$fd");

		get_profile_size("caller","$fU@$fd",$var(ccaller));
		get_profile_size("domain","$fd",$var(cdomain));
		xlog("L_INFO", "Number of calls from user $fU@$fd is $var(ccaller)\n");
		xlog("L_INFO", "Number of calls from domain $fd is $var(cdomain)\n");

		### S2 ###
		### S2 ###

	}

	if ($rU=~"[0-9].*\+") {
		# Hunt group
		$avp(huntgroup)=$rU;
		$rU=$(avp(huntgroup){s.select,0,+});
		xlog("forwarded to =$(avp(huntgroup){s.select,0,+})\n");
		$avp(hgcount)=0;
		setflag('HUNTGROUP');
	}

	#apply DB based aliases
	alias_db_lookup("dbaliases");

	if (avp_db_query("select callfwd from subscriber where username='$rU' and domain='$rd'","$avp(callfwd)") && $avp(callfwd)!="") {
		$rU=$avp(callfwd);
		xlog("forwarded unconditionally to: $avp(callfwd)\n");
	}

	$avp(callee_id)=$ru; #Save the original request uri for later usage

	route(to_dialplan);
}

route[to_dialplan] {

	# Dial plan processing
	if($avp(dpid)==NULL ) {
		$avp(dpid)=0;
	}
	xlog("Dialplan: Subscriber.s dpid: $(avp(dpid))\n");

	if(!dp_translate($avp(dpid),$rU,$rU,$avp(dest))) {
		send_reply(404, "Destination Not Found");
		exit;
	}
	xlog("Dialplan: Destination: $avp(dest)\n");

	if ($avp(dest)=="3") {
		#Route to usrloc
		route(to_user);
	}

	if ($avp(dest)=="4") {
		#route to drouting
		route(to_pstn);
	}

	if ($avp(dest)=="5") {
		#route to media server
		route(to_media);
	}

	send_reply(404, "Unknown Destination");
	exit;
}


route[to_user] {
	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist("$ru","subscriber")) {
			send_reply(404,"Not Found");
			exit;
		}
		if(isflagset('HUNTGROUP')) {
			route(huntgroup);
		}
		t_reply(480, "Temporarily Unavailable");
		exit;
	}

	### S3 ###
	### S3 ###

	route(relay);
}


route[to_media] {
	xlog("routing to media servers via load balancer\n");

	if (!lb_start(1, "channel")) {
		send_reply(500,"No route to Media");
		exit;
	}
	xlog("Using media server $du (RURI=$ru) \n");

	t_on_failure("media_failover");

	route(handle_nat);

	### S4 ###
	### S4 ###

	t_relay();
	exit;
}


route[to_pstn] {
	xlog("routed using drouting\n");

	# routing to the pstn
	if(!do_routing(0)) {
		send_reply(500, "No routes available");
		exit;
	}
	#for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_failure("gateway_failure");
	}

	#topology_hiding();

	route(handle_nat);

	### S5 ###
	### S5 ###

	t_relay();
	exit;
}


route[handle_sequential]
{
	# handle hop-by-hop ACK (no routing required)
	if (is_method("ACK") && t_check_trans()) {
		t_relay();
		exit;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if (!loose_route()) {
		if (topology_hiding_match()) {
			xlog("Successfully matched this request to a topology hiding dialog. \n");
			xlog("Caller side callid is $ci \n");
			xlog("Callee side callidÂ  is $TH_callee_callid \n");
		} else {
			# no loose_route, no topo_match
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404, "Not Found");
			exit;
		}
	}

	# is the destination end point marked as nated (due a
	# nated contact originated by this destination) ?
	if (ruri_has_param("nat","yes"))
		setbflag('NATED_CALLEE');

	xlog("SCRIPT:DBG: sequential $rm sent to $ru/$du\n");
	route(relay);
	exit;
}


route[handle_register]
{
	# authenticate the REGISTER requests
	if (!www_authorize("", "subscriber")) {
		www_challenge("", "auth,auth-int");
		exit;
	}

	if (!$au==$tU) {
		send_reply(403,"Forbidden auth ID");
		exit;
	}

	# if the REGISTER is originated from behind a NAT,
	# set the flag (for future calls going to that destination)
	# and start pinging
	if (isflagset('NATED_CALLER')) {
		fix_nated_register();
		setbflag('NATED_CALLEE');
		setbflag('SIPPING_FLAG');
	}

	if (!save("location"))
		sl_reply_error();
	exit;
}


route[handle_nat] {
	# if caller or callee is nated, use media relay
	if (isflagset('NATED_CALLER')||isbflagset('NATED_CALLEE')) {
		if (is_method("BYE")) {
			rtpproxy_unforce();
		} else if (has_body("application/sdp")) {
			rtpproxy_offer("co");
		}
	}
	# if caller is nated, fix the contact
	if (isflagset('NATED_CALLER'))
		fix_nated_contact(";nat=yes");
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		if(isflagset('HUNTGROUP')) {
			t_on_failure("huntgroup");
		} else {
			t_on_failure("missed_call");
		}
	}

	route(handle_nat);

	t_relay();
	exit;
}


route[huntgroup] {
	xlog("Huntgroup count=$avp(hgcount) group=$avp(huntgroup)\n");
	$avp(hgcount):=$avp(hgcount)+1;
	if($(avp(huntgroup){s.select,$avp(hgcount),+})!=null) {
		revert_uri();
		$rU=$(avp(huntgroup){s.select,$avp(hgcount),+});
		route(to_dialplan);
		exit;
	} else {
		t_reply(404, "No more members on huntgroup");
		exit;
	}
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");

	# if caller or callee is nated, use media relay
	if (isflagset('NATED_CALLER') || isbflagset('NATED_CALLEE')) {
		if (has_body("application/sdp"))
			rtpproxy_answer("co");
	}
	# if callee (sender or this reply) is nated, fix it
	if ( isbflagset('NATED_CALLEE') )
		fix_nated_contact(";nat=yes");

}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	##--
	##-- If busy send to forward on busy 
	##--
	if (t_check_status("486")) {
		$ru = $avp(callee_id); #recover the original uri
		if (avp_db_query("select fwdbusy from subscriber where username='$rU' and domain='$rd'","$avp(fwdbusy)") && $avp(fwdbusy)!="") {
			$rU=$avp(fwdbusy);
			xlog("forwarded on busy to: $avp(fwdbusy)\n");
			route(to_dialplan);
		}
		exit;
	}

	##--
	##-- If timeout (408) or unavailable temporarily (480),
	##-- send to fwdnoanswer 
	##--
	if (t_check_status("408") || t_check_status("480")) {
		$ru = $avp(callee_id); #recover the original uri
		if (avp_db_query("select noanswer from subscriber where username='$rU' and domain='$rd'","$avp(noanswer)") && $avp(noanswer)!="") {
			$rU=$avp(noanswer);
			xlog("forwarded on non answer to: $avp(noanswer)\n");
			route(to_dialplan);
		}
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}
}


failure_route[gateway_failure] {
	if (t_was_cancelled()) {
		exit;
	}

	xlog("reaching route \"gateway_failure\" with code $T_reply_code\n");

	if (t_check_status("[56][0-9][0-9]") ||
	(t_local_replied("all") && t_check_status("408")) ) {
		xlog("GW failover case detected, looking for a next one\n");
		dr_disable();
		if (use_next_gw()) {
			xlog ("next gateway is $ru\n");
			t_on_failure("gateway_failure");
			t_relay();
			exit;
		}
		t_reply(503, "Service not available, no more gateways");
		exit;
	}
}


failure_route[huntgroup] {
	xlog("Huntgroup failure route count=$avp(hgcount)\n");
	route(huntgroup);
}


failure_route[media_failover] {
	if (t_was_cancelled())
		exit;

	if ( t_check_status( "[56][0-9][0-9]" ) ||
	(t_local_replied("all") && t_check_status("408"))) {
		# media server failover -> mark it as probing
		xlog("Media server routing failed with reply $T_reply_code\n");
		lb_disable_dst();
		# try another media server, if available
		if (!lb_next()) {
			xlog("no more media servers available\n");
			t_reply(503,"Service Unavailable");
			exit;
		}
		# send the call to the new media server
		xlog("Trying the new $du media server\n");
		t_on_failure("media_failover");
		t_relay();
	}
}


