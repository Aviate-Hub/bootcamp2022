#
# OpenSIPS Bootcamp Training
#     LAB 3.4
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

udp_workers=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


# SIP UDP listerner
listen=udp:eth0:5060




####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### JSON Management Interface
loadmodule "httpd.so"
modparam("httpd", "port", 8080)
loadmodule "mi_http.so"
modparam("mi_http", "root", "json")

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### REGISTRAR module
loadmodule "registrar.so"

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("auth_db", "load_credentials", "")
### S1 ###
modparam("auth", "calculate_ha1", 1)
modparam("auth","username_spec","$avp(userspec)")
modparam("auth","password_spec","$avp(passwd)")
modparam("auth_db", "load_credentials", "$avp(passwd)=password")
### S1 ###

#### Domain Module
loadmodule "domain.so"
modparam("domain", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc", "use_domain", 1)

#### Alias DB Module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Local (in-memory) Caching Module
### S2 ###
loadmodule "cachedb_local.so"
### S2 ###



#### UDP protocol
loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route {
	## only incoming SIP requests entering here

	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	xlog("SCRIPT:DBG: incoming $rm from $si:$sp, from $fu to $ru ($ci)\n");

	## if it has TO TAG, it is a sequential/in-dialog request
	if (has_totag()) {
		route(handle_sequential);
	}

	## CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	########### only initial requests at this point #########
	t_check_trans();

	if ( is_method("REGISTER") ) {
		route(handle_register);
	}

	## authenticate and authorize
	if (is_from_local()) {

		# caller is local
		# authenticate if from local subscriber
		# authenticate all initial non-REGISTER request that pretend to be
		# generated by local subscriber (domain from FROM URI is local)
		if (!proxy_authorize("", "subscriber")) {
			proxy_challenge("", 0);
			exit;
		}
		if (!$au==$fU) {
			send_reply(403,"Forbidden auth ID");
			exit;
		}

		consume_credentials();
		# caller authenticated

	} else {

		# if caller is not local, then called number must be local
		if (!is_uri_host_local()) {
			send_reply(403,"Rely forbidden");
			exit;
		}

	}

	## record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n");
		route(relay);
	}

	## requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	#apply DB based aliases
	alias_db_lookup("dbaliases");

	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist("$ru","subscriber")) {
			send_reply(404,"Not Found");
			exit;
		}
		t_reply(480, "Temporarily Unavailable");
		exit;
	}

	route(relay);
}


route[handle_sequential]
{
	# handle hop-by-hop ACK (no routing required)
	if (is_method("ACK") && t_check_trans()) {
		t_relay();
		exit;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if (!loose_route()) {
		# we do record-routing for all our traffic, so we should not
		# receive any sequential requests without Route hdr.
		send_reply(404, "Not Found");
		exit;
	}

	xlog("SCRIPT:DBG: sequential $rm sent to $ru/$du\n");
	route(relay);
	exit;
}


route[handle_register]
{
	# authenticate the REGISTER requests

	### S3 ###
	### Caching for registration passwords ###
	# do we have the password cached ?
	if(cache_fetch("local","passwd_$tU@$td",$avp(passwd))) {

		$avp(userspec) = $tU;
		xlog("SCRIPT: stored password is $avp(passwd)\n");
		# perform auth from variables
		# $avp(userspec) contains the username
		# $avp(passwd) contains the password
		if (!pv_www_authorize("")) {
			# authentication failed -> do challenge
			www_challenge("", 0);
			exit;
		}

	} else {

		# perform DB authentication ->
		# password will be loaded from DB automatically
	### S3 ###
		if (!www_authorize("", "subscriber")) {
			www_challenge("", 0);
			exit;
		}
	### S4 ###
		# after DB authentication, the password is available
		# in $avp(passwd) because of the "load_credentials"
		# module parameter.
		xlog("SCRIPT: storing password <$avp(passwd)> on $tU@$td\n");
		# use a 20 minutes lifetime for the password;
		# after that, it will erased from cache and we do
		# db authentication again (refresh the passwd from DB)
		cache_store("local","passwd_$tU@$td","$avp(passwd)",1200);

	}
	### S4 ###

	if (!$au==$tU) {
		send_reply(403,"Forbidden auth ID");
		exit;
	}

	if (!save("location"))
		sl_reply_error();
	exit;
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	t_relay();
	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}
}


