#
# OpenSIPS Bootcamp Training
#     LAB 6.1
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


# SIP UDP listerner
listen=udp:eth0:5060

listen=hep_udp:127.0.0.1:6090



####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### JSON Management Interface
loadmodule "httpd.so"
modparam("httpd", "port", 8080)
loadmodule "mi_json.so"
modparam("mi_json", "mi_json_root", "json")

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### REGISTRAR module
loadmodule "registrar.so"

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")
modparam("auth_db", "load_credentials", "$avp(rpid)=rpid ;$avp(dpid)= dpid")

#### Domain Module
loadmodule "domain.so"
modparam("domain", "db_url",
        "mysql://opensips:opensipsrw@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching
modparam("uri|auth_db|usrloc", "use_domain", 1)

#### Alias DB Module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### IP-based Permissions Module
loadmodule "permissions.so"
modparam("permissions", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Group-based ACL Module
loadmodule "group.so"
modparam("group", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### Dynamic Routing module
loadmodule "drouting.so"
modparam("drouting","db_url",
	"mysql://opensips:opensipsrw@localhost/opensips")

#### AVP OPerations module
loadmodule "avpops.so"
modparam("avpops", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")
modparam("avpops", "avp_table", "usr_preferences")

#### Dialplan module
loadmodule "dialplan.so"
modparam("dialplan", "db_url","mysql://opensips:opensipsrw@localhost/opensips")

#### Tracing modules
loadmodule "proto_hep.so"
modparam("proto_hep", "hep_id", "[hid]127.0.0.1:9060;transport=udp;version=3")
loadmodule "siptrace.so"
modparam("siptrace", "trace_id", "[tid]uri=hep:hid")


#### UDP protocol
loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route {
	## only incoming SIP requests entering here
	route(to_homer);

	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}

	xlog("SCRIPT:DBG: incoming $rm from $si:$sp, from $fu to $ru ($ci)\n");

	## if it has TO TAG, it is a sequential/in-dialog request
	if (has_totag()) {
		route(handle_sequential);
	}

	## CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	########### only initial requests at this point #########
	t_check_trans();

	if ( is_method("REGISTER") ) {
		route(handle_register);
	}

	## authenticate and authorize
	if (check_source_address("0")) {

		# caller is a gateway

	} else

	if (is_from_local()) {

		# caller is local
		# authenticate if from local subscriber
		# authenticate all initial non-REGISTER request that pretend to be
		# generated by local subscriber (domain from FROM URI is local)
		if (!proxy_authorize("", "subscriber")) {
			proxy_challenge("", "0");
			exit;
		}
		if (!db_check_from()) {
			send_reply("403","Forbidden auth ID");
			exit;
		}

		consume_credentials();
		# caller authenticated

	} else {

		# if caller is not local, then called number must be local
		if (!is_uri_host_local()) {
			send_reply("403","Rely forbidden");
			exit;
		}

	}

	## record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n");
		route(relay);
	}

	## requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply("503", "Service Unavailable");
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}

	#apply DB based aliases
	alias_db_lookup("dbaliases");

	# Dial plan processing
	if( $avp(dpid)==NULL ) {
		$avp(dpid)=0;
	}
	xlog("Dialplan: Subscriber.s dpid: $(avp(dpid))");

	if(!dp_translate("$avp(dpid)","$rU/$rU","$avp(dest)")) {
		send_reply("404", "Destination Not Found");
		exit;
	}
	xlog("Dialplan: Destination: $avp(dest)");

	if ($avp(dest)=="3") {
		#Route to usrloc
		route(to_user);
	}

	if ($avp(dest)=="4") {
		#route to drouting
		route(to_pstn);
	}

	if ($avp(dest)=="5") {
		#route to media server
		route(to_media);
	}

	send_reply("404", "Unknown Destination");
	exit;
}


route[to_user] {
	## S1 ##
	if(avp_db_load("$ru","$avp(callfwd)")) {
		$ru=$avp(callfwd);
		xlog("forwarded to: $avp(callfwd)");
	}
	$avp(callee_id) = $rd;
	## S1 ##

	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist()) {
			send_reply("404","Not Found");
			exit;
		}
		t_reply("480", "Temporarily Unavailable");
		exit;
	}

	route(relay);
}


route[to_media] {
	rewritehostport("192.168.11.137:5061");
	t_relay();
	exit;
}


route[to_pstn] {
	xlog("routed using drouting");

	# routing to the pstn
	if(!do_routing("1")) {
		send_reply("500", "No routes available");
		exit;
	}
	#for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_failure("gateway_failure");
	}

	t_relay();
	exit;
}


route[handle_sequential]
{
	# handle hop-by-hop ACK (no routing required)
	if (is_method("ACK") && t_check_trans()) {
		t_relay();
		exit;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if (!loose_route()) {
		# we do record-routing for all our traffic, so we should not
		# receive any sequential requests without Route hdr.
		send_reply("404", "Not Found");
		exit;
	}

	xlog("SCRIPT:DBG: sequential $rm sent to $ru/$du\n");
	route(relay);
	exit;
}


route[handle_register]
{
	# authenticate the REGISTER requests
	if (!www_authorize("", "subscriber")) {
		www_challenge("", "0");
		exit;
	}

	if (!db_check_to()) {
		send_reply("403","Forbidden auth ID");
		exit;
	}

	if (!save("location"))
		sl_reply_error();
	exit;
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	t_relay();
	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	## S2 ##
	##--
	##-- If busy send to the e-mail server, prefix the "b"
	##-- character to indicate busy. 
	##--
	if (t_check_status("486")) {
		$rU = $avp(callee_id);
		prefix("b"); #This prefix is included to play the busy message
		xlog("redirect on 486 to ruri=<$ru>");
		route(to_media);
		exit;
	}
	##--
	##-- If timeout (408) or unavailable temporarily (480),
	##-- prefix the uri with the "u"character to indicate 
	##-- unanswered and send to the e-mail
	##-- sever
	##--
	if (t_check_status("408") || t_check_status("480")) {
		$rU = $avp(callee_id);
		prefix("u"); #This prefix is included to play the unanswered message
		xlog("redirect on 408/480 to ruri=<$ru>");
		route(to_media);
		exit;
	}
	## S2 ##

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}
}


failure_route[gateway_failure] {
	if (t_was_cancelled()) {
		exit;
	}

	xlog("reaching route \"gateway_failure\" with code $T_reply_code\n");

	if (t_check_status("[56][0-9][0-9]") ||
	(t_local_replied("all") && t_check_status("408")) ) {
		xlog("GW failover case detected, looking for a next one\n");
		if (use_next_gw()) {
			xlog ("next gateway is $ru \n");
			t_on_failure("gateway_failure");
			t_relay();
			exit;
		}
		t_reply("503", "Service not available, no more gateways");
		exit;
	}
}


route[to_homer] {
	xlog("SCRIPT:DBG: sending message out to Homer\n");
	# see declaration of tid in trace_id section
	$var(trace_id) = "tid";
	$var(trace_type) = NULL;

	if (!has_totag()) {
		if (is_method("INVITE"))
			$var(trace_type) = "dialog";
		else if (!is_method("CANCEL"))
			$var(trace_type) = "transaction";
	} else if (is_method("ACK")) {
		$var(trace_type) = "message";
	} else {
		$var(trace_type) = "transaction";
	}

	# do trace here
	switch ($var(trace_type)) {
	case "dialog":
	case "transaction":
		sip_trace("$var(trace_id)", "t", "sip|xlog");
		break;
	case "message":
		sip_trace("$var(trace_id)", "m", "sip|xlog");
		break;
	}
}
